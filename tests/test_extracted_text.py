"""–¢–µ—Å—Ç—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è extracted_text –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö."""

import pytest
import tempfile
from pathlib import Path
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

from annex4parser.models import Base, Document
from annex4parser.document_ingestion import ingest_document


class TestExtractedTextFunctionality:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ extracted_text."""

    @pytest.fixture
    def test_db(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏."""
        engine = create_engine('sqlite:///:memory:')
        Base.metadata.create_all(engine)
        SessionLocal = sessionmaker(bind=engine)
        session = SessionLocal()
        yield session
        session.close()

    def create_sample_pdf_content(self, content: str) -> Path:
        """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Å–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .pdf
        # –í —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö —ç—Ç–æ –±—ã–ª –±—ã –Ω–∞—Å—Ç–æ—è—â–∏–π PDF
        with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False, encoding='utf-8') as f:
            f.write(content)
            temp_path = Path(f.name)
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –≤ .pdf –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏
        pdf_path = temp_path.with_suffix('.pdf')
        temp_path.rename(pdf_path)
        return pdf_path

    def test_document_model_has_extracted_text_field(self, test_db):
        """–¢–µ—Å—Ç —á—Ç–æ –º–æ–¥–µ–ª—å Document –∏–º–µ–µ—Ç –ø–æ–ª–µ extracted_text."""
        # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —Å extracted_text
        doc = Document(
            filename="test.pdf",
            file_path="/path/to/test.pdf",
            extracted_text="This is the extracted text content.",
            ai_system_name="TestAI",
            document_type="risk_assessment"
        )
        
        test_db.add(doc)
        test_db.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
        saved_doc = test_db.query(Document).first()
        assert saved_doc.extracted_text == "This is the extracted text content."

    def test_extracted_text_can_be_null(self, test_db):
        """–¢–µ—Å—Ç —á—Ç–æ extracted_text –º–æ–∂–µ—Ç –±—ã—Ç—å NULL."""
        doc = Document(
            filename="test.pdf",
            file_path="/path/to/test.pdf",
            extracted_text=None,  # –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º None
            ai_system_name="TestAI",
            document_type="risk_assessment"
        )
        
        test_db.add(doc)
        test_db.commit()
        
        saved_doc = test_db.query(Document).first()
        assert saved_doc.extracted_text is None

    def test_extracted_text_handles_large_content(self, test_db):
        """–¢–µ—Å—Ç —á—Ç–æ extracted_text –º–æ–∂–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –±–æ–ª—å—à–∏–µ —Ç–µ–∫—Å—Ç—ã."""
        # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç
        large_text = "Lorem ipsum dolor sit amet. " * 1000  # ~27KB
        
        doc = Document(
            filename="large_doc.pdf",
            file_path="/path/to/large_doc.pdf",
            extracted_text=large_text,
            ai_system_name="TestAI",
            document_type="risk_assessment"
        )
        
        test_db.add(doc)
        test_db.commit()
        
        saved_doc = test_db.query(Document).first()
        assert len(saved_doc.extracted_text) == len(large_text)
        assert saved_doc.extracted_text == large_text

    def test_extracted_text_handles_unicode(self, test_db):
        """–¢–µ—Å—Ç —á—Ç–æ extracted_text –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç Unicode."""
        unicode_text = "–¢–µ—Å—Ç —Å —Ä—É—Å—Å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ üöÄ –∏ —ç–º–æ–¥–∑–∏ √±√°√©√≠√≥√∫ √†√®√¨√≤√π"
        
        doc = Document(
            filename="unicode_doc.pdf",
            file_path="/path/to/unicode_doc.pdf",
            extracted_text=unicode_text,
            ai_system_name="TestAI",
            document_type="risk_assessment"
        )
        
        test_db.add(doc)
        test_db.commit()
        
        saved_doc = test_db.query(Document).first()
        assert saved_doc.extracted_text == unicode_text

    @pytest.mark.skipif(True, reason="Requires pdfplumber which may not extract from simple text files")
    def test_ingest_document_saves_extracted_text(self, test_db):
        """–¢–µ—Å—Ç —á—Ç–æ ingest_document —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç."""
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π "PDF" —Ñ–∞–π–ª
        test_content = "This is a test document with risk management and documentation requirements."
        pdf_path = self.create_sample_pdf_content(test_content)
        
        try:
            # –ò–Ω–≥–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            doc = ingest_document(
                pdf_path, 
                test_db,
                ai_system_name="TestAI",
                document_type="risk_assessment"
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ extracted_text —Å–æ—Ö—Ä–∞–Ω—ë–Ω
            assert doc.extracted_text is not None
            assert len(doc.extracted_text) > 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ë–î
            saved_doc = test_db.query(Document).filter_by(id=doc.id).first()
            assert saved_doc.extracted_text is not None
            assert saved_doc.extracted_text == doc.extracted_text
            
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if pdf_path.exists():
                pdf_path.unlink()

    def test_document_ingestion_preserves_extracted_text(self, test_db):
        """–¢–µ—Å—Ç —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∏–Ω–≥–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç extracted_text."""
        # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞–ø—Ä—è–º—É—é —Å known —Ç–µ–∫—Å—Ç–æ–º
        test_text = "Risk management procedures must be documented according to Article 9.2"
        
        doc = Document(
            filename="manual_test.pdf",
            file_path="/path/to/manual_test.pdf",
            extracted_text=test_text,
            ai_system_name="ManualTestAI",
            document_type="risk_assessment"
        )
        
        test_db.add(doc)
        test_db.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞
        saved_doc = test_db.query(Document).first()
        assert saved_doc.extracted_text == test_text
        assert "Risk management" in saved_doc.extracted_text
        assert "Article 9.2" in saved_doc.extracted_text

    def test_extracted_text_searchable(self, test_db):
        """–¢–µ—Å—Ç —á—Ç–æ –ø–æ extracted_text –º–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã."""
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
        docs_data = [
            ("doc1.pdf", "This document covers risk management procedures."),
            ("doc2.pdf", "Technical documentation requirements are outlined here."),
            ("doc3.pdf", "Human oversight protocols for AI systems."),
        ]
        
        for filename, text in docs_data:
            doc = Document(
                filename=filename,
                file_path=f"/path/to/{filename}",
                extracted_text=text,
                ai_system_name="SearchTestAI",
                document_type="risk_assessment"
            )
            test_db.add(doc)
        
        test_db.commit()
        
        # –ò—â–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        risk_docs = test_db.query(Document).filter(
            Document.extracted_text.contains("risk management")
        ).all()
        assert len(risk_docs) == 1
        assert risk_docs[0].filename == "doc1.pdf"
        
        tech_docs = test_db.query(Document).filter(
            Document.extracted_text.contains("Technical documentation")
        ).all()
        assert len(tech_docs) == 1
        assert tech_docs[0].filename == "doc2.pdf"


class TestExtractedTextIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è extracted_text."""

    @pytest.fixture
    def test_db(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏."""
        engine = create_engine('sqlite:///:memory:')
        Base.metadata.create_all(engine)
        SessionLocal = sessionmaker(bind=engine)
        session = SessionLocal()
        yield session
        session.close()

    def test_extracted_text_with_keyword_mapping(self, test_db):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ extracted_text —Å keyword mapping."""
        # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        doc_text = """
        This technical documentation covers the following areas:
        - Risk management procedures for high-risk AI systems
        - Human oversight requirements and protocols  
        - Data governance and quality assurance measures
        - Post-market monitoring and conformity assessment
        """
        
        doc = Document(
            filename="integration_test.pdf",
            file_path="/path/to/integration_test.pdf",
            extracted_text=doc_text,
            ai_system_name="IntegrationAI",
            document_type="risk_assessment"
        )
        
        test_db.add(doc)
        test_db.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–µ–º –Ω–∞–π—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∏–∑ extracted_text
        saved_doc = test_db.query(Document).first()
        text = saved_doc.extracted_text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑
        assert "technical documentation" in text.lower()
        assert "risk management" in text.lower()  
        assert "human oversight" in text.lower()
        assert "conformity assessment" in text.lower()

    def test_extracted_text_audit_trail(self, test_db):
        """–¢–µ—Å—Ç —á—Ç–æ extracted_text –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç audit trail."""
        original_text = "Original document content with risk management."
        
        # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        doc = Document(
            filename="audit_test.pdf",
            file_path="/path/to/audit_test.pdf",
            extracted_text=original_text,
            ai_system_name="AuditAI",
            document_type="risk_assessment"
        )
        
        test_db.add(doc)
        test_db.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        saved_doc = test_db.query(Document).first()
        assert saved_doc.extracted_text == original_text
        
        # –≠—Ç–æ –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –º–∞–ø–ø–∏–Ω–≥–∞ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏–π
        assert "risk management" in saved_doc.extracted_text
