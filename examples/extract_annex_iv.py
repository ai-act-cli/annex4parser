#!/usr/bin/env python3
"""–ü—Ä–∏–º–µ—Ä –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Annex IV –∏–∑ AI Act.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, –∫–∞–∫:
1. –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–≥—É–ª—è—Ü–∏—é —á–µ—Ä–µ–∑ V2 –º–æ–Ω–∏—Ç–æ—Ä
2. –ò–∑–≤–ª–µ—á—å –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞ Annex IV —Å –∏–µ—Ä–∞—Ä—Ö–∏–µ–π
3. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É parent/child –æ—Ç–Ω–æ—à–µ–Ω–∏–π
"""

import asyncio
import sys
from pathlib import Path
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ annex4parser
sys.path.insert(0, str(Path(__file__).parent.parent))

from annex4parser.models import Base, Rule, Regulation
from annex4parser.regulation_monitor_v2 import RegulationMonitorV2


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è Annex IV."""
    
    # –°–æ–∑–¥–∞–µ–º –ë–î
    engine = create_engine("sqlite:///compliance_demo.db")
    Base.metadata.create_all(engine)
    SessionLocal = sessionmaker(bind=engine)
    
    with SessionLocal() as session:
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º V2 –º–æ–Ω–∏—Ç–æ—Ä
        monitor = RegulationMonitorV2(db=session)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        stats = await monitor.update_all()
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {stats}")
        
        print("\nüìã –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É Annex IV...")
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞ Annex IV
        annex_iv_rules = (
            session.query(Rule)
            .filter(Rule.section_code.like("AnnexIV%"))
            .order_by(Rule.section_code)
            .all()
        )
        
        if not annex_iv_rules:
            print("‚ö†Ô∏è  Annex IV –ø—Ä–∞–≤–∏–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ, –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç Annex IV –∏–ª–∏ –ø–∞—Ä—Å–µ—Ä –Ω–µ —Å–º–æ–≥ –∏—Ö –∏–∑–≤–ª–µ—á—å.")
            return
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(annex_iv_rules)} –ø—Ä–∞–≤–∏–ª Annex IV:")
        print()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—è–º –∏–µ—Ä–∞—Ä—Ö–∏–∏
        root_rules = [r for r in annex_iv_rules if r.parent_rule_id is None]
        child_rules = [r for r in annex_iv_rules if r.parent_rule_id is not None]
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É parent_id -> children
        children_map = {}
        for rule in child_rules:
            if rule.parent_rule_id not in children_map:
                children_map[rule.parent_rule_id] = []
            children_map[rule.parent_rule_id].append(rule)
        
        def print_rule_tree(rule, indent=0):
            """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–µ—á–∞—Ç–∞–µ—Ç –¥–µ—Ä–µ–≤–æ –ø—Ä–∞–≤–∏–ª."""
            prefix = "  " * indent + ("‚îú‚îÄ " if indent > 0 else "")
            title_part = f" - {rule.title}" if rule.title else ""
            content_preview = (rule.content or "")[:80].replace("\n", " ")
            if len(rule.content or "") > 80:
                content_preview += "..."
            
            print(f"{prefix}{rule.section_code}{title_part}")
            if content_preview.strip():
                print(f"{'  ' * (indent + 1)}üí¨ {content_preview}")
            
            # –ü–µ—á–∞—Ç–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            if rule.id in children_map:
                for child in sorted(children_map[rule.id], key=lambda x: x.section_code):
                    print_rule_tree(child, indent + 1)
        
        # –ü–µ—á–∞—Ç–∞–µ–º –¥–µ—Ä–µ–≤–æ
        for root in sorted(root_rules, key=lambda x: x.section_code):
            print_rule_tree(root)
            print()
        
        print("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  ‚Ä¢ –ö–æ—Ä–Ω–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(root_rules)}")
        print(f"  ‚Ä¢ –î–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(child_rules)}")
        print(f"  ‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–∞–≤–∏–ª Annex IV: {len(annex_iv_rules)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –º–∞–ø–ø–∏–Ω–≥–∞
        print("\nüîó –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è keyword –º–∞–ø–ø–∏–Ω–≥–∞:")
        for rule in annex_iv_rules[:5]:  # –ø–µ—Ä–≤—ã–µ 5 –ø—Ä–∞–≤–∏–ª
            keywords = []
            content = (rule.content or "").lower()
            
            if "technical documentation" in content:
                keywords.append("technical documentation")
            if "conformity assessment" in content:
                keywords.append("conformity assessment")
            if "risk management" in content:
                keywords.append("risk management")
            if "post-market monitoring" in content:
                keywords.append("post-market monitoring")
            
            if keywords:
                print(f"  ‚Ä¢ {rule.section_code}: {', '.join(keywords)}")


if __name__ == "__main__":
    print("üîß Annex IV Extractor - –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–µ—Ä–∞—Ä—Ö–∏–∏ AI Act")
    print("=" * 60)
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
