# production_monitoring.py
"""–ü—Ä–∏–º–µ—Ä production-grade –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ–≥—É–ª—è—Ç–æ—Ä–æ–≤.

–≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:
- –ú—É–ª—å—Ç–∏—Å–æ—Ä—Å-—Ñ–µ—Ç—á–∏–Ω–≥ —Å ELI SPARQL –∏ RSS
- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
- Event-driven –∞–ª–µ—Ä—Ç—ã
- –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π diff-–∞–Ω–∞–ª–∏–∑
"""

import asyncio
import logging
from pathlib import Path
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

from annex4parser.models import Base
from annex4parser.regulation_monitor_v2 import RegulationMonitorV2, update_all_regulations
from annex4parser.alerts import AlertEmitter, get_alert_emitter
from annex4parser.legal_diff import LegalDiffAnalyzer, analyze_legal_changes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def setup_database():
    """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    # –°–æ–∑–¥–∞—ë–º SQLite –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    engine = create_engine("sqlite:///compliance_production.db")
    Base.metadata.create_all(engine)
    
    Session = sessionmaker(bind=engine)
    return Session()


async def setup_alerts():
    """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –∞–ª–µ—Ä—Ç–æ–≤."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–º–∏—Ç—Ç–µ—Ä –∞–ª–µ—Ä—Ç–æ–≤ (–±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –¥–µ–º–æ)
    emitter = get_alert_emitter(
        webhook_url=None,  # –û—Ç–∫–ª—é—á–∞–µ–º webhook –¥–ª—è –¥–µ–º–æ
        kafka_bootstrap_servers=None,  # –û—Ç–∫–ª—é—á–∞–µ–º Kafka –¥–ª—è –¥–µ–º–æ
        kafka_topic="rule-update"
    )
    
    logger.info("Alert system initialized (demo mode)")
    return emitter


async def run_monitoring_cycle():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        Session = await setup_database()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–ª–µ—Ä—Ç—ã
        emitter = await setup_alerts()
        
        with Session() as session:
            # –°–æ–∑–¥–∞—ë–º –º–æ–Ω–∏—Ç–æ—Ä —Ä–µ–≥—É–ª—è—Ç–æ—Ä–æ–≤
            monitor = RegulationMonitorV2(session)
            
            logger.info("Starting regulatory monitoring cycle...")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            stats = await monitor.update_all()
            
            logger.info(f"Monitoring cycle completed: {stats}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã
            from annex4parser.models import ComplianceAlert
            new_alerts = session.query(ComplianceAlert).filter_by(
                resolved_at=None
            ).order_by(ComplianceAlert.created_at.desc()).limit(10).all()
            
            for alert in new_alerts:
                logger.info(f"New alert: {alert.message} (Priority: {alert.priority})")
            
            return stats
    except Exception as e:
        logger.error(f"Monitoring cycle failed: {e}")
        return {"error": str(e)}


async def test_legal_diff():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π diff-–∞–Ω–∞–ª–∏–∑."""
    analyzer = LegalDiffAnalyzer()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã
    old_text = """
    Article 15.3 Documentation requirements
    
    Providers shall establish and maintain technical documentation 
    for high-risk AI systems in accordance with this Regulation.
    """
    
    new_text = """
    Article 15.3 Documentation requirements
    
    Providers shall establish and maintain comprehensive technical documentation 
    for high-risk AI systems in accordance with this Regulation, including 
    detailed risk assessments and mitigation strategies.
    """
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    change = analyzer.analyze_changes(old_text, new_text, "Article15.3")
    
    print("\n=== Legal Diff Analysis ===")
    print(f"Section: {change.section_code}")
    print(f"Change type: {change.change_type}")
    print(f"Severity: {change.severity}")
    print(f"Affected keywords: {change.keywords_affected}")
    print(f"Semantic similarity: {change.semantic_score:.2f}")
    print(f"Summary: {analyzer.get_change_summary(change)}")


async def test_eli_client():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å ELI SPARQL –∫–ª–∏–µ–Ω—Ç."""
    from annex4parser.eli_client import fetch_regulation_by_celex
    
    logger.info("Testing ELI SPARQL client...")
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å EU AI Act
        result = await fetch_regulation_by_celex("32023R0988")
        
        if result:
            logger.info(f"Successfully fetched regulation: {result['title']}")
            logger.info(f"Version: {result['version']}")
            logger.info(f"Text length: {len(result['text'])} characters")
        else:
            logger.warning("No regulation found (this is expected in demo mode)")
            
    except Exception as e:
        logger.warning(f"ELI client test failed (expected in demo mode): {e}")


async def test_rss_monitoring():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å RSS –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥."""
    from annex4parser.rss_listener import fetch_rss_feed, REGULATORY_RSS_FEEDS
    
    logger.info("Testing RSS monitoring...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º RSS –ø–ª–µ–Ω–∞—Ä–Ω—ã—Ö –∑–∞—Å–µ–¥–∞–Ω–∏–π –ï–≤—Ä–æ–ø–∞—Ä–ª–∞–º–µ–Ω—Ç–∞
        entries = await fetch_rss_feed(REGULATORY_RSS_FEEDS["ep_plenary"])
        
        logger.info(f"Fetched {len(entries)} RSS entries")
        
        for link, content_hash, title in entries[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
            logger.info(f"Entry: {title}")
            logger.info(f"Link: {link}")
            logger.info(f"Hash: {content_hash[:16]}...")
            logger.info("-" * 50)
            
    except Exception as e:
        logger.warning(f"RSS monitoring test failed (expected in demo mode): {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
    print("üöÄ Starting Annex4Parser Production Monitoring Demo")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π diff
    await test_legal_diff()
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º ELI –∫–ª–∏–µ–Ω—Ç (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞)
    await test_eli_client()
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º RSS –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞)
    await test_rss_monitoring()
    print()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    print("üîÑ Running full monitoring cycle...")
    stats = await run_monitoring_cycle()
    
    print("\n‚úÖ Production monitoring demo completed!")
    print(f"üìä Final stats: {stats}")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ
    asyncio.run(main())
